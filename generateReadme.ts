#!/usr/bin/env node
import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const repoRoot = path.resolve(__dirname);

// config — tweak as you like
const TITLE = "SVG Gallery";
const INCLUDE_PREFIXES = []; // e.g., ["logos/", "icons/"]; empty = all
const PER_FOLDER_LIMIT = 60; // or undefined to show all
const IMG_WIDTH = 160;       // px

async function listFilesRecursive(dir, ignore = new Set([".git", "node_modules"])) {
    const out: string[] = [];
    async function walk(curr) {
        for (const ent of await fs.readdir(curr, { withFileTypes: true })) {
            if (ent.isDirectory()) {
                if (!ignore.has(ent.name)) await walk(path.join(curr, ent.name));
            } else {
                out.push(path.join(curr, ent.name));
            }
        }
    }
    await walk(dir);
    return out;
}

function groupByFolder(files) {
    const map = new Map();
    for (const abs of files) {
        const rel = path.relative(repoRoot, abs).replace("\\", "/");
        const folder = rel.includes("/") ? rel.split("/").slice(0, -1).join("/") : ".";
        if (!map.has(folder)) map.set(folder, []);
        map.get(folder).push(rel);
    }
    for (const [k, arr] of map) arr.sort();
    return new Map([...map.entries()].sort());
}

function matches(folder) {
    if (!INCLUDE_PREFIXES.length) return true;
    return INCLUDE_PREFIXES.some((p: string) => folder.startsWith(p.replace(/^\.?\/*/, "")));
}

function escapePath(p) {
    return encodeURI(p); // handles spaces etc.
}

function section(folder, files) {
    const shown = files.slice(0, 999);
    const thumbs = shown
        .map(rel => `<a href="${escapePath(rel)}" title="${rel}"><img src="${escapePath(rel)}" alt="${rel}" width="160" /></a>`)
        .join("\n"); // NO leading spaces on each line!

    return `
<details open>
<summary><strong>${folder}</strong> (${files.length})</summary>

<div style="display:flex;flex-wrap:wrap;gap:12px;align-items:flex-start;">
${thumbs}
</div>

</details>`;
}

(async () => {
    const all = await listFilesRecursive(repoRoot);
    const svgs = all.filter(f => f.toLowerCase().endsWith(".svg"));
    console.log(`Found ${svgs.length} SVG files.`, svgs);
    const grouped = groupByFolder(svgs);

    const toc: string[] = [];
    const sections: string[] = [];
    for (const [folder, files] of grouped) {
        if (!matches(folder)) continue;
        toc.push(`- [${folder}](#${folder.replace(/[^a-z0-9]+/gi, "-").toLowerCase()})`);
        sections.push(section(folder, files));
    }

    console.log('toc, sections', { toc, sections });

    const rawMd = `# ${TITLE}

Total SVGs: **${svgs.length}**

> Generated by \`tools/generate-readme.mjs\`. Do not edit by hand.

## Folders
${toc.join("\n")}

${sections.join("\n\n---\n")}
`;

    const md = rawMd.replace(/^\s{4,}(<\/?a\b.*|<\/?img\b.*)>/gm, "$1");

    await fs.writeFile(path.join(repoRoot, "README.md"), md, "utf8");
    console.log("README.md generated with inline SVG previews ✅");
})().catch(e => { console.error(e); process.exit(1); });
